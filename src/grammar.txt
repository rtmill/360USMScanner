<program> ::= PROGRAM ID VAR <dec> BEGIN <st list> END <out>;
<dec> ::= <nat dec> <set dec>;
<nat dec> ::= "" | NAT <ne var list> SEMICOLON ;
<set dec> ::=  "" | SET <ne var list> SEMICOLON ;
<ne var list> ::= ID | ID COMMA <ne var list>;
<st list> ::= "" | <ne st list>;
<ne st list> ::=  <st> |  <st>  SEMICOLON <ne st list>;
<st> ::= <asgn> | <if> ;
<asgn> ::= <set asgn> | <nat asgn>; 
<set asgn> ::= ID ASSIGN <set exp>;
<set exp> ::= <set exp> SETDIFFERENCE <slevel 2> | <slevel 2>;
<slevel 2> ::= <slevel 2> UNION <slevel 1> | <slevel 1>;
<slevel 1> ::= <slevel 1> INTERSECTION <slevel 0> | <slevel 0>;
<slevel 0> ::= COMPLEMENT <slevel 0> | <s atomic> ;
<s atomic> ::= ID | <set const> | LEFTPAREN <set exp> RIGHTPAREN;
<set const> ::= <complemented> | <set literal>;
<complemented> ::= CMP <set literal>;
<set literal> ::= LEFTBRACE <nat list> RIGHTBRACE;
<nat list> ::=  "" | <ne nat list>;
<ne nat list> ::=  NATCONST | NATCONST COMMA <ne nat list>;
<nat asgn> ::= ID ASSIGN <nat exp>;
<nat exp> ::= ID | NATCONST;  // no arithmetic operators
<test>  ::=   NOT <test> | <test atomic>;
<test atomic> ::= <set exp> EQUALS <set exp> | <set exp> SUBSET <set exp> | <nat exp> IS_IN <set exp> ;
<if> ::= IF <test> THEN <st list> ENDIF | IF <test> THEN <st list> ELSE <st list> ENDIF;
<out> ::= <set exp> PERIOD;
